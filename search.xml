<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node.js教程0-2安装Node环境</title>
    <url>/Node-js/Node-js%E6%95%99%E7%A8%8B0-2%E5%AE%89%E8%A3%85Node%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="1、下载Node-js"><a href="#1、下载Node-js" class="headerlink" title="1、下载Node.js"></a>1、下载Node.js</h1><p>首先浏览器打开<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a><br>界面如下图所示：</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/node%E5%AE%98%E7%BD%91.png" alt=""><br>Node.js分为两个版本：<br>1.LTS（长期支持版/稳定版）<br>2.Current（近期体验/测试版）<br>我这里用的是长期支持版。一般来说长期支持办会趋于稳定，当前发布版是会有一些新功能。</p>
<h2 id="Node-js——名副其实的版本帝！"><a href="#Node-js——名副其实的版本帝！" class="headerlink" title="Node.js——名副其实的版本帝！"></a>Node.js——名副其实的版本帝！</h2><p>Node.js1.0之前等了6年，而从1.0到8.0，只用了2年时间。<br>Node.js的主要版本进入当前发布状态六个月后，奇数版本（9、11等）将不再受支持，只能升级为偶数版，而偶数版本（10、12等）将变为长期支持版，并可以用于一般用途。 通常可以保证关键错误将在总共30个月内得到修复。生产应用程序应仅使用LTS版。</p>
<h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><ul>
<li>傻瓜式安装，一路next即可。对于已安装过的，重新安装就后升级</li>
<li>安装完成后，确认Node环境是否安装成功<br>打开命令行，输入<code>node --version</code>或者<code>node -v</code><br><img src="http://q0fjtnail.bkt.clouddn.com/%E6%A3%80%E6%9F%A5node%E7%89%88%E6%9C%AC.png" alt=""></li>
<li>配置环境变量<br>安装的时候会有提示默认加到环境变量中。如果没添加环境变量没关系，可以手动添加。右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;编辑path环境变量-&gt;新建-&gt;将node安装包文件夹添加到环境变量中<br>配置成功后如下图所示：<br><img src="http://q0fjtnail.bkt.clouddn.com/node%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt=""></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Node.js</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js教程0-1Node.js介绍</title>
    <url>/Node-js/Node-js%E6%95%99%E7%A8%8B0-1Node-js%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p> 在前端的道路上摸爬滚打，终于来到了Node.js。这是我第一次在这里写教程。如有错误，望读者海涵指正，我也会去不断的改进。希望我写的东西，能够给你们帮助。<br>  在写之前，我想分享一件很有意义的事情。对于大多数刚入门的程序小白来说，学一门语言或技术，经常会忘记。一周前学过的东西，如果不经常复习就会忘记，大概也就记得30%—70%，其实我也是这样的。面对这样的情况，深入理解知识点那是必须的，如何深入理解呢？本人亲身实践，认为一个非常见效的方法就是：学习一个知识点要知道学的是什么？为什么？（程序执行原理是什么）怎么做？（如何去使用这个知识点） 什么时候能用到这个知识点？在什么地方能用到这个知识点？概括来说就是：what、why、how、when、where.<br>  在学习之前，知道这五个要点是非常重要的。<br>  在学习过程中，会遇到数不胜数的API,我们不是电脑，是人脑，不需要我们过目不忘，不需要我们全都记住。用到的时候，查找对应的文档就可以。我们需要记住的是如何去找到API以及如何解决问题。<br>  该教程针对于有HTML、CSS、javaScript基础的小白，如果有Java、PHP、Ruby、.NET等服务端学习经验的你来说就更好了。接下来进入正题。</p>
<h1 id="1、为什么要学习Node-js"><a href="#1、为什么要学习Node-js" class="headerlink" title="1、为什么要学习Node.js"></a>1、为什么要学习Node.js</h1><p>  现在越来越多的公司和个人开发者去使用Node.js去开发各种应用。相信有很多朋友是从前端开发过来看我写的这个教程的，目前，企业在招前端工程师的时候，要求具有服务端开发经验最好。而且对于个人职业发展，当然是掌握的技能越多越有竞争优势。对于后端开发的来说，Node.js有其他后端语言没有的特性。</p>
<h1 id="2、Node-js是什么"><a href="#2、Node-js是什么" class="headerlink" title="2、Node.js是什么"></a>2、Node.js是什么</h1><p>  Node.js不是一门语言，不是库不是框架，是一个不需要浏览器的javaScript的运行环境。也就是说Node.js可以解析和执行javaScript代码。<br>  那么，Node.js中的javaScvript和浏览器中运行的javaScript有什么不同呢？</p>
<ul>
<li>浏览器中的javaScript包括三个部分：EcmaScript标准、DOM、BOM</li>
<li>Node.js中的javaScript只有SCMAScript标准，没有DOM和BOM</li>
<li>另外，在Node.js中，还提供了一些用javaScript操作的服务器级别的API，例如：文件读写、网络服务的构建、网络通信、http服务器等。这些API在浏览器中运行的javaScript是没有的。<h2 id="2-1-Node-js的历史"><a href="#2-1-Node-js的历史" class="headerlink" title="2.1 Node.js的历史"></a>2.1 Node.js的历史</h2>曾经有一个叫瑞安·达尔(Ryan Dahl)的数学博士，和女朋友去了德国，在那里，有个叫Chris的人开发了一个叫做Rack的Web服务器，这个服务器有非常简单的接口设计——接受请求，返回响应。这时候，Ryan在从事自由职业的同时，接触到了Nginx的一些模块，他发现Nginx很多东西都是异步的。于是，他就把Rack和Nginx的非阻塞IO模型结合起来。到了2008年12月Google发布了V8引擎，天时地利人和，Ryan发现V8引擎既简介有有趣，而且运行速度很快。Ryan突然想到：javaScript本身就是单线程的（不能进行同步IO操作），而且浏览器发起的Ajax请求就是非阻塞的。如果将javaScript和异步IO以及一个简单的HTTP服务器集合在一起会怎样？于是，2009年，Node.js问世。直到2012 年 1 月 - Ryan Dahl 宣布不再参与 Node.js 日常开发和维护工作。直至目前，Node.js由Node.js基金会持有和维护。<h2 id="2-2-Node-js的特性"><a href="#2-2-Node-js的特性" class="headerlink" title="2.2 Node.js的特性"></a>2.2 Node.js的特性</h2></li>
<li>event-driven(事件驱动)</li>
<li>non-blocking I/O model(非阻塞IO模型)</li>
<li>built on Chrome’s V8 JavaScript engine（构建于V8引擎之上）<br>Google Chrome 的V8引擎是目前公认的解析和执行javaScript代码最快的，Ryan把Chrome中的V8引擎移植出来，开发了一个独立的js运行环境<h2 id="2-3-npm"><a href="#2-3-npm" class="headerlink" title="2.3 npm"></a>2.3 npm</h2>npm是世界上最大的开源生态系统，<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a><br>npm是nodejs的包管理器（node package manager）。绝大多数的javaScript相关的包都放在了npm上，这样做得目的是为了让开发人员更方便的去下载使用。大家把自己写好的源码上传到npm官网上，如果要用某个或某些个，直接通过npm安装就可以了。<h1 id="3、Node-js资源分享"><a href="#3、Node-js资源分享" class="headerlink" title="3、Node.js资源分享"></a>3、Node.js资源分享</h1><a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode社区 国内最大最具影响力的 Node.js 开源技术社区</a><br><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a> 适合入门，文段不是很长<br><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">中文文档</a> API的使用<br><a href="https://nodejs.org/dist/latest-v12.x/docs/api/" target="_blank" rel="noopener">英文文档</a> API的使用</li>
<li>相关书籍<br>《深入浅出Node.js》作者：朴灵   这本书理论性知识较多，几乎没有实践内容，对理解原理和底层比较有帮助<br>《Node.js权威指南》API讲解，没有实战</li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Node.js</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Git&Github教程</title>
    <url>/Git-Github/Git-Github%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>对于像我一样刚入门的IT小白来说，很多人应该还不知道Git和Github是什么吧。我刚刚整理了有关Git和Github的一些内容，所以想及时分享给大家。这篇博文不会让你成为Git大神，Git专家，但是会让你from zero to hero.如果你还对Git和Github一头雾水的话，那就继续往下看吧！</p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1、Git的发展史"><a href="#1、Git的发展史" class="headerlink" title="1、Git的发展史"></a>1、Git的发展史</h2><h2 id="2、Git是什么"><a href="#2、Git是什么" class="headerlink" title="2、Git是什么"></a>2、Git是什么</h2><h2 id="3、为什么要使用Git"><a href="#3、为什么要使用Git" class="headerlink" title="3、为什么要使用Git"></a>3、为什么要使用Git</h2><h2 id="4、如何操作Git"><a href="#4、如何操作Git" class="headerlink" title="4、如何操作Git"></a>4、如何操作Git</h2><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1>]]></content>
      <categories>
        <category>Git&amp;Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO(Next主题)+Github+Git部署一个属于自己的博客教程（一）</title>
    <url>/blog/HEXO(Next%E4%B8%BB%E9%A2%98)+Github+Git%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>​    基于HEXO+Github+Git搭建的博客终于大功告成了，在我搭建这个博客的过程中，走了很多弯路，其中也看了很多的博文和教程，但众说纷纭，所以有必要尽快把我搭建博客的整个过程记录下来（免得忘记），一方面是为了让浏览到此篇文章的小伙伴少走一些弯路，另一方面是希望把整个过程记录下来，以至于下一次搭建博客，会节省一些时间。补充一下，整个搭建过程都是基于windows的。下面我们就开始吧！</p>
<h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><h3 id="1-1安装node框架"><a href="#1-1安装node框架" class="headerlink" title="1.1安装node框架"></a>1.1安装node框架</h3><p>HEXO是基于node框架的，所以我们首先要下载安装node,下载地址[node.js官网]&lt; <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> &gt;</p>
<p>推荐下载长期支持版（即LTS版），因为当前发布版虽然含新功能但不稳定，而且奇数版在当前版本发布之后六个月将变为不支持状态（node.js版本不得低于8.6建议10.0及以上版本）</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/nodedownload.png" alt="node_download"></p>
<p>安装完成后win+R启动命令行，输入<code>node -v</code>，来检测安装是否成功。如果返回如下图所示，证明你安装成功了</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/nodesucc.png" alt="mark"></p>
<h3 id="1-2注册Github账号"><a href="#1-2注册Github账号" class="headerlink" title="1.2注册Github账号"></a>1.2注册Github账号</h3><p>Github推出的Github Pages服务可以很方便的建立一个属于我们自己的个人博客</p>
<p>进入[Github 网站]，按照提示进行注册然后登陆（已经注册过的大佬绕过）</p>
<p>点击右上角加号—&gt;new repository，新建一个仓库，这个仓库就是用来存放博客的地方</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/newrepo.png" alt=""></p>
<p>接着进入到创建仓库界面，Repository name就是使用浏览器访问你的博客的地址</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/createrepo.png" alt="createrepo"></p>
<h3 id="1-3安装Git"><a href="#1-3安装Git" class="headerlink" title="1.3安装Git"></a>1.3安装Git</h3><p>为了能够把自己所写的博客上传到github上面去，我们使用分布式版本控制工具——[git官网]&lt; <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> &gt; 进入官网后，直接下载安装最新版就可以了。安装完成之后在桌面右键会有一个Git Bash。类似于Linux终端，可以模拟Linux下的终端进行操作。可以在命令提示符中输入<code>git --version</code>打开之后，像下图这样</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/gitbash.png" alt="git bash"></p>
<h3 id="1-4安装HEXO"><a href="#1-4安装HEXO" class="headerlink" title="1.4安装HEXO"></a>1.4安装HEXO</h3><p>HEXO的安装在它的[官方文档]&lt; <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> &gt;中说的很详细，下面我就简单的介绍一下HEXO的安装</p>
<h4 id="1-4-1新建一个用来存放博客的文件夹"><a href="#1-4-1新建一个用来存放博客的文件夹" class="headerlink" title="1.4.1新建一个用来存放博客的文件夹"></a>1.4.1新建一个用来存放博客的文件夹</h4><p>在合适的位置新建一个用来存放今后所写博客的文件夹，比如我的存放在<code>E:\my blog\</code>目录下</p>
<p>创建成功后进入该文件夹，在该目录下右键打开Git Bash Here，启动Git控制台（后面所有的命令行操作都用Git,不用windows自带的命令提示符，即CMD），输入<code>npm i hexo-cli-g</code>安装HEXO，会出现几个报错，但是不用理会</p>
<p>安装完成后输入<code>hexo -v</code>，出现下图界面，表示安装成功</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/hexo-v.png" alt="hexo-version"></p>
<p>随后，初始化文件夹，仍然在该命令行窗口执行<code>hexo init 新建的文件夹名</code></p>
<p>接着，输入<code>npm install</code>安装所需要的组件。在刚刚新创建的文件夹下就会产生文件目录</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/hexofolder.png" alt="hexofolder"></p>
<ul>
<li><code>_config.yml</code>文件是网站的配置文件，可以配置大部分参数，也是最重要的文件</li>
<li>package.json文件是应用程序的信息</li>
<li>source是资源文件夹，是用来存放用户的资源，如用户每次编写的博客、标签页面、分类页面</li>
<li>themes是主题文件夹，HEXO会根据主题生成不同的静态页面</li>
<li>scaffolds是模板文件夹，新建的文章会根据模板来建立文件</li>
</ul>
<h2 id="2、开始搭建"><a href="#2、开始搭建" class="headerlink" title="2、开始搭建"></a>2、开始搭建</h2><h4 id="2-1部署到本地"><a href="#2-1部署到本地" class="headerlink" title="2.1部署到本地"></a>2.1部署到本地</h4><p>其实在环境配置完成之后，就已经在本地生成了博客主页。仍然是在刚刚的Git命令行中执行<code>hexo g</code>(hexo generation,生成静态页面)，然后执行<code>hexo s</code>（hexo server 启动本地服务，进行文章预览调试）。然后浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到你博客的效果啦，不过这是本地调试用，其他人是看不到的。(调试完毕后记得 control + C 关闭本地端口，不然下次是进不去的)   看下图：</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/landscape.png" alt="landscape"></p>
<p>这是安装HEXO的默认主题，在之后的博文中，我会分享如何更改主题</p>
<h4 id="2-2部署到Github"><a href="#2-2部署到Github" class="headerlink" title="2.2部署到Github"></a>2.2部署到Github</h4><h5 id="2-2-1部署签名"><a href="#2-2-1部署签名" class="headerlink" title="2.2.1部署签名"></a>2.2.1部署签名</h5><p>先使用下面的命令对Git进行初始化配置，即设置签名，作用是区别不同开发人员身份。这里邮箱地址不一定非得是注册Github的邮箱地址，任意邮箱即可，作用不是很大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;your name&quot;</span><br><span class="line">$ git config --global user.email &quot;your e-mail address&quot;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-2配置SSH"><a href="#2-2-2配置SSH" class="headerlink" title="2.2.2配置SSH"></a>2.2.2配置SSH</h5><p>  打开Git Bash，执行下面的命令生成SSH访问私钥及公钥   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;email@email.com&quot;</span><br></pre></td></tr></table></figure>

<p>当提示输入的时候，不用管，一直回车就可以。</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/SSH.png" alt="SSH"></p>
<p>然后<code>/c/users/你的电脑账户名/.ssh</code>文件下会生成两个文件</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/sshid.png" alt="sshid"></p>
<p>然后打开你的Github,点击右上角头像–&gt;Setting–&gt;SSH keys。</p>
<p>然后点击<code>New SSH Key</code>新建一个SSH key。Tittle可以自己起。然后将<code>id_rsa.pub</code></p>
<p>文件中的内容复制粘贴到Key下面。然后用下面的命令测试是否连接到Github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果出现下图所示内容则证明连接成功</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/sshkeysucc.png" alt="sshkeysucc"></p>
<h5 id="2-2-3设置deploy参数"><a href="#2-2-3设置deploy参数" class="headerlink" title="2.2.3设置deploy参数"></a>2.2.3设置deploy参数</h5><p>打开HEXO主文件夹下的<code>_config.yml</code>（鼠标移动到该文件上右键，选择opendlg打开），设置底部的<code>deply</code>参数，下面是我的设置。type和branch和我设置的一样就行</p>
<p>其中repo在Github中进行复制，如下图：</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/jerensshaddr.png" alt="jerensshaddr"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Jerenliu/jerenliu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>  注意：配置的时候要严格注意格式，不然后面会出错（type,repo,branch后面的冒号统一用英文的，冒号后面必须有一个空格。type,repo,branch前面要有两个空格，并对齐）。后面进行配置文件都需要遵循这种格式   </p>
<h4 id="2-3验证"><a href="#2-3验证" class="headerlink" title="2.3验证"></a>2.3验证</h4><p>  以上配置完成后保存 然后回到终端执行<code>npm install hexo-deployer-git --save</code>安装一个插件，这样才能将你写好的文章部署到github服务器上并让别人浏览到。安装完成后在终端中依次执行如下代码</p>
<p>  <code>hexo clean</code>    作用：清理缓存</p>
<p>  <code>hexo generate</code>    作用：进行渲染   简写： <code>hexo g</code></p>
<p> 调试完毕后使用   <code>hexo deploy</code>     作用：部署到git服务器   简写： <code>hexo d</code>  </p>
<p>然后就能在浏览器输入地址访问博客页面了</p>
<h4 id="2-4问题"><a href="#2-4问题" class="headerlink" title="2.4问题"></a>2.4问题</h4><p>  当执行hexo d可能会出现如下错误</p>
<p><img src="http://q0fjtnail.bkt.clouddn.com/erro.png" alt="erro"></p>
<p>类似这样的错误，这个错误的原因是因为本地的博客版本与远程版本不一致</p>
<p>第一种解释：.deploy_git这个文件的内容是用于将自己所写的博客部署到github仓库中的内容 </p>
<p>第二种解释：这个应该是git部署用的文件。比如你写好的博客想部署到 GitHub Pages上去的话，可以用git部署插件，那个插件会创建这个目录</p>
<p>那么如何解决这个问题呢？</p>
<p>第一步，删除自己博客目录下的.deploy_git文件</p>
<p>第二步，进入git,输入：hexo clean 清除缓存hexo g -d 渲染部署   </p>
<p>  执行完以上操作后打开浏览器地址栏输入你的博客地址，就可以看到效果了</p>
<p>​      </p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
